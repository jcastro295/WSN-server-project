#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

var options = {
  key: fs.readFileSync('/etc/letsencrypt/live/wsnufpsproject.ga/privkey.pem', 'utf8'),
  cert: fs.readFileSync('/etc/letsencrypt/live/wsnufpsproject.ga/cert.pem', 'utf8'),
  ca: fs.readFileSync('/etc/letsencrypt/live/wsnufpsproject.ga/chain.pem', 'utf8')
};

var http_port = normalizePort(process.env.PORT || '80');
var https_port = process.env.PORT_HTTPS || 443; 


app.set("port",https_port);

/**
 * Create HTTPS server.
 */

server = https.createServer(options, app);
server.listen(https_port);

server.on('error', onError);
server.on('listening', onListening);

//Implementing socket.io
var io = require('socket.io')(server);
app.set('socketio', io);

http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers.host + req.url });
    res.end();
  }).listen(http_port);

http_server = http.createServer(app).listen(8080);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  var port = app.get('port');

  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
